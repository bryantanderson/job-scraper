definitions:
  services.AssessPayload:
    properties:
      candidate:
        $ref: '#/definitions/services.Candidate'
      job:
        $ref: '#/definitions/services.Job'
      userId:
        type: string
    type: object
  services.Assessment:
    properties:
      compatibilityPoint:
        $ref: '#/definitions/services.Point'
      createdAt:
        type: string
      elasticId:
        type: string
      experiencePoint:
        type: boolean
      id:
        type: string
      jobId:
        type: string
      locationMatch:
        $ref: '#/definitions/services.Match'
      requirementPoint:
        $ref: '#/definitions/services.Point'
      responsibilityScore:
        $ref: '#/definitions/services.Score'
      score:
        type: integer
      skillsScore:
        $ref: '#/definitions/services.Score'
    type: object
  services.Candidate:
    properties:
      education:
        items:
          $ref: '#/definitions/services.Education'
        type: array
      experiences:
        items:
          $ref: '#/definitions/services.Experience'
        type: array
      id:
        type: string
      location:
        type: string
      skills:
        items:
          $ref: '#/definitions/services.Skill'
        type: array
      summary:
        type: string
    type: object
  services.Education:
    properties:
      description:
        type: string
      institute:
        type: string
      title:
        type: string
    type: object
  services.Experience:
    properties:
      company:
        type: string
      description:
        type: string
      endDate:
        type: string
      startDate:
        type: string
      title:
        type: string
    type: object
  services.Job:
    properties:
      company:
        type: string
      description:
        type: string
      elasticId:
        type: string
      id:
        type: string
      location:
        type: string
      locationType:
        type: string
      qualifications:
        items:
          $ref: '#/definitions/services.Qualification'
        type: array
      responsibilities:
        items:
          $ref: '#/definitions/services.Responsibility'
        type: array
      title:
        type: string
      yearsOfExperience:
        type: integer
    type: object
  services.Match:
    properties:
      isMatch:
        type: boolean
    type: object
  services.Point:
    properties:
      explanation:
        type: string
      isValid:
        type: boolean
    type: object
  services.Qualification:
    properties:
      description:
        type: string
    type: object
  services.Responsibility:
    properties:
      description:
        type: string
    type: object
  services.Score:
    properties:
      explanation:
        type: string
      score:
        type: integer
    type: object
  services.ScrapeIndeedPayload:
    properties:
      url:
        type: string
    type: object
  services.ScrapePayload:
    properties:
      candidate:
        $ref: '#/definitions/services.Candidate'
      shouldAssess:
        type: boolean
      url:
        type: string
      userId:
        type: string
    type: object
  services.ScrapedJob:
    properties:
      company:
        type: string
      description:
        type: string
      location:
        type: string
      title:
        type: string
    type: object
  services.ScrapedJobAssessment:
    properties:
      assessment:
        $ref: '#/definitions/services.Assessment'
      job:
        $ref: '#/definitions/services.Job'
    type: object
  services.Skill:
    properties:
      description:
        type: string
    type: object
info:
  contact: {}
paths:
  /assessments/:
    get:
      consumes:
      - application/json
      description: Queries for an existing assessment.
      parameters:
      - description: ID of the job the assessment is based on
        in: query
        name: jobId
        type: string
      - description: The score attained in the assessment
        in: query
        name: score
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/services.Assessment'
            type: array
        "500":
          description: Internal Server Error
      summary: Queries for an existing assessment.
      tags:
      - Assessment
    post:
      consumes:
      - application/json
      description: Creates an existing assessment.
      parameters:
      - description: Request body
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/services.AssessPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.Assessment'
        "500":
          description: Internal Server Error
      summary: Creates an existing assessment.
      tags:
      - Assessment
  /assessments/{userId}:
    get:
      consumes:
      - application/json
      description: Gets an existing assessment.
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.Assessment'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Gets an existing assessment.
      tags:
      - Assessment
  /health:
    get:
      consumes:
      - application/json
      description: Health check ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Health check
      tags:
      - Health
  /scrape/indeed:
    post:
      consumes:
      - application/json
      description: Scrapes an Indeed job page. Accepts a "candidate" and ranks the
        candidate against the job postings if the flag is selected.
      parameters:
      - description: Request body
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/services.ScrapeIndeedPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/services.ScrapedJob'
            type: array
        "400":
          description: Bad Request
      summary: Scrapes an indeed job page
      tags:
      - Scrape
  /scrape/seek:
    post:
      consumes:
      - application/json
      description: Scrapes a seek job page. Accepts a "candidate" and ranks the candidate
        against the job postings if the flag is selected.
      parameters:
      - description: Request body
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/services.ScrapePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/services.ScrapedJob'
            type: array
        "400":
          description: Bad Request
      summary: Scrapes a seek job page
      tags:
      - Scrape
  /scrape/seek/{user}:
    get:
      consumes:
      - application/json
      description: Fetches the assessments made for a particular candidate, in relation
        to scraped jobs.
      parameters:
      - description: User ID
        in: path
        name: user
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/services.ScrapedJobAssessment'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Fetches the assessments made for a particular candidate, in relation
        to scraped jobs.
      tags:
      - Scrape
swagger: "2.0"
