// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/assessments/": {
            "get": {
                "description": "Queries for an existing assessment.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assessment"
                ],
                "summary": "Queries for an existing assessment.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the job the assessment is based on",
                        "name": "jobId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The score attained in the assessment",
                        "name": "score",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/services.Assessment"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Creates an existing assessment.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assessment"
                ],
                "summary": "Creates an existing assessment.",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.AssessPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.Assessment"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/assessments/{userId}": {
            "get": {
                "description": "Gets an existing assessment.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assessment"
                ],
                "summary": "Gets an existing assessment.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.Assessment"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Health check ping",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/scrape/indeed": {
            "post": {
                "description": "Scrapes an Indeed job page. Accepts a \"candidate\" and ranks the candidate against the job postings if the flag is selected.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Scrape"
                ],
                "summary": "Scrapes an indeed job page",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.ScrapeIndeedPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/services.ScrapedJob"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/scrape/seek": {
            "post": {
                "description": "Scrapes a seek job page. Accepts a \"candidate\" and ranks the candidate against the job postings if the flag is selected.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Scrape"
                ],
                "summary": "Scrapes a seek job page",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.ScrapePayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/services.ScrapedJob"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/scrape/seek/{user}": {
            "get": {
                "description": "Fetches the assessments made for a particular candidate, in relation to scraped jobs.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Scrape"
                ],
                "summary": "Fetches the assessments made for a particular candidate, in relation to scraped jobs.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/services.ScrapedJobAssessment"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "services.AssessPayload": {
            "type": "object",
            "properties": {
                "candidate": {
                    "$ref": "#/definitions/services.Candidate"
                },
                "job": {
                    "$ref": "#/definitions/services.Job"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "services.Assessment": {
            "type": "object",
            "properties": {
                "compatibilityPoint": {
                    "$ref": "#/definitions/services.Point"
                },
                "createdAt": {
                    "type": "string"
                },
                "elasticId": {
                    "type": "string"
                },
                "experiencePoint": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "jobId": {
                    "type": "string"
                },
                "locationMatch": {
                    "$ref": "#/definitions/services.Match"
                },
                "requirementPoint": {
                    "$ref": "#/definitions/services.Point"
                },
                "responsibilityScore": {
                    "$ref": "#/definitions/services.Score"
                },
                "score": {
                    "type": "integer"
                },
                "skillsScore": {
                    "$ref": "#/definitions/services.Score"
                }
            }
        },
        "services.Candidate": {
            "type": "object",
            "properties": {
                "education": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.Education"
                    }
                },
                "experiences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.Experience"
                    }
                },
                "id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.Skill"
                    }
                },
                "summary": {
                    "type": "string"
                }
            }
        },
        "services.Education": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "institute": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "services.Experience": {
            "type": "object",
            "properties": {
                "company": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "services.Job": {
            "type": "object",
            "properties": {
                "company": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "elasticId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "locationType": {
                    "type": "string"
                },
                "qualifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.Qualification"
                    }
                },
                "responsibilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.Responsibility"
                    }
                },
                "title": {
                    "type": "string"
                },
                "yearsOfExperience": {
                    "type": "integer"
                }
            }
        },
        "services.Match": {
            "type": "object",
            "properties": {
                "isMatch": {
                    "type": "boolean"
                }
            }
        },
        "services.Point": {
            "type": "object",
            "properties": {
                "explanation": {
                    "type": "string"
                },
                "isValid": {
                    "type": "boolean"
                }
            }
        },
        "services.Qualification": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                }
            }
        },
        "services.Responsibility": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                }
            }
        },
        "services.Score": {
            "type": "object",
            "properties": {
                "explanation": {
                    "type": "string"
                },
                "score": {
                    "type": "integer"
                }
            }
        },
        "services.ScrapeIndeedPayload": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                }
            }
        },
        "services.ScrapePayload": {
            "type": "object",
            "properties": {
                "candidate": {
                    "$ref": "#/definitions/services.Candidate"
                },
                "shouldAssess": {
                    "type": "boolean"
                },
                "url": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "services.ScrapedJob": {
            "type": "object",
            "properties": {
                "company": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "services.ScrapedJobAssessment": {
            "type": "object",
            "properties": {
                "assessment": {
                    "$ref": "#/definitions/services.Assessment"
                },
                "job": {
                    "$ref": "#/definitions/services.Job"
                }
            }
        },
        "services.Skill": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
